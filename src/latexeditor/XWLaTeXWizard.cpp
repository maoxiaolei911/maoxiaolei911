/****************************************************************************
 **
 ** 版权所有 (C) 2006-2007 秀文公司.
 **
 ****************************************************************************/
#include <QtGui>
#include "XWString.h"
#include "XWFileName.h"
#include "XWApplication.h"
#include "XWTexSea.h" 
#include "XWFontSea.h"
#include "XWFTFont.h"
#include "XWCharacterWidget.h"
#include "XWTeXDocumentType.h"
#include "XWLaTeXWizard.h"

#define XW_DOC_ARTICLE 0
#define XW_DOC_BOOK    1
#define XW_DOC_REPORT  2
#define XW_DOC_LETTER  3
#define XW_DOC_BEAMER  4

XWMyDocFont::XWMyDocFont()
{
	sizes = "<->";
  index = 0;
  pid = 3;
  eid = 1;
  wmode = 0;
  stemv = -1;

  size = 10.0;
  efacter = 1.0;
  slant = 0.0;
}

void XWMyDocFont::setTeXFont()
{
	QString strtmp = family.remove(QChar(' '));
  XWTeXFontSetting fontsetting;
	QString texname = strtmp + series + shape;
	fontsetting.setTexName(texname);
	fontsetting.setEFactor(efacter);
	fontsetting.setEncodingID(eid);
	fontsetting.setFont(fontFile);
	fontsetting.setIndex(index);
	fontsetting.setInEncoding("unicode");
	fontsetting.setPlatID(pid);
	fontsetting.setSize(size);
	fontsetting.setSlant(slant);
	fontsetting.setStemV(stemv);
	fontsetting.setWMode(wmode);
}

void XWMyDocFont::writeStream(QTextStream & stm)
{
	QString strtmp = family.remove(QChar(' '));
	stm << "\\DeclareFontShape{OT1}{" << strtmp << "}{" << series << "}{" << shape << "}{" << sizes;
	QString texname = family + series + shape;
	stm << texname << "}{}\n";
}

XWMyDocument::XWMyDocument(QObject * parent)
:QObject(parent)
{
	docClass = XW_DOC_ARTICLE;

	letterSec = "lettersectiondefault.sty";

	useOldClass = true;
	useCJK = false;
	fontSize = "10pt";
	orientation = TEX_DOC_WD_TLT;

	useOldFormat = true;

	hyphen = "hyphen.ltx";

	mediumNormal.series = "m";
	mediumNormal.shape = "n";
	mediumSlanted.series = "m";
	mediumSlanted.shape = "sl";
	mediumItalic.series = "m";
	mediumItalic.shape = "it";
	mediumCapsSmallCaps.series = "m";
	mediumCapsSmallCaps.shape = "sc";

	boldNormal.series = "bx";
	boldNormal.shape = "n";

	boldExtendedNormal.series = "bx";
	boldExtendedNormal.shape = "n";
	boldExtendedItalic.series = "bx";
	boldExtendedItalic.shape = "it";
	boldExtendedSlanted.series = "bx";
	boldExtendedSlanted.shape = "sl";
	boldExtendedCapsSmallCaps.series = "bx";
	boldExtendedCapsSmallCaps.shape = "sc";

	mediumUltraItalic.series = "m";
	mediumUltraItalic.shape = "ui";
}

void XWMyDocument::createClass()
{
	if (useOldClass)
	  return ;

	QString cls = QString("%1tex/xiuwen/class/%2.cls").arg(path).arg(className);
	QFile file(cls);
	file.open(QFile::WriteOnly | QFile::Truncate);
	QTextStream stream(&file);
  stream.setGenerateByteOrderMark(false);
	stream.setCodec("UTF-8");

	stream << "%     -*- coding: UTF-8 -*-\n%  class generated by xiuwen LaTeX editor\n";
	stream << "%\n\\NeedsTeXFormat{LaTeX2e}[1996/06/01]\n";
	stream << "\\ProvidesClass{";
	stream << className;
	stream << "}\n[";

	QDate date;
	stream << date.toString("yyyy/MM/dd");
	stream << " v1.0 LaTeX document class]\n\\RequirePackage{ifpdf}\n";

	if (useCJK)
	{
		stream << "%\n\\input xwcjk.sty\n\\input punctcjk.sty\n";
	}

	QString l = QString("%\n\\input hangju%1.sty\n").arg(lineSkip);
	stream << l;

	stream << "%\n\\input zihao.sty\n";

  stream << "%\n\\input ";
  stream << numberFile << "\n";
	if (numberFile == "numberchinese.sty")
	  stream << "\\AtBeginDocument{\\setupchinesecounter}\n";

	stream << "\\AtEndOfClass{\n\\IfFileExists{\\jobname.out}{%\n \\immediate\\write18{pdfstring \\jobname}}{}}\n";

	if (useCJK)
	{
		stream << "%\n\\let\\MakeUppercase\relax\n";
		stream << "\\let\\MakeLowercase\relax\n";
	}

  stream << "%\n\\def\\usebody{\\pushocplist\\OCPinput";
	switch (orientation)
	{
		default:
		  stream << "}\n";
		  break;

		case TEX_DOC_WD_RTT:
		  stream << " \\pagedir TRT \\bodydir RTT \\pardir RTT \\textdir RTT}\n";
		  break;

		case TEX_DOC_WD_LTL:
		  stream << " \\pagedir TLT \\bodydir LTL \\pardir LTL \\textdir LTL}\n";
		  break;

		case TEX_DOC_WD_TRT:
		  stream << " \\pagedir TRT \\bodydir TRT \\pardir TRT \\textdir TRT}\n";
		  break;
	}

	stream << "\\let\\usebodytemplate\\usebody\n";

	stream << "%\n\\input docoptions.clo\n";

	switch (orientation)
	{
		default:
		  break;

		case TEX_DOC_WD_RTT:
		case TEX_DOC_WD_LTL:
		  stream << "\\@verticaltypesettrue\n";
		  break;
	}

	switch (docClass)
	{
		default:
		  break;

		case XW_DOC_ARTICLE:
		  stream << "\\@titlepagefalse\n";
			stream << "\\@mainmatterfalse\n";
			stream << "%\n\\ExecuteOptions{a4paper,";
			stream << fontSize;
			stream << ",oneside,twocolumn,final}\n";
			stream << "\\ProcessOptions\n";
			stream << "%\n\\input articleheaddefault.sty\n";
			stream << "%\n\\input articletitledefault.sty\n";
			if (useCJK)
			  stream << "%\n\\input namesect.sty\n";
			stream << "%\n\\input articlesectiondefault.sty\n";
			stream << "%\n\\input ";
			stream << sectionFile;
			stream << "\n";
			stream << "%\n\\input itemdefault.sty\n";
			stream << "%\n\\input articleabstractdefault.sty\n";
			stream << "%\n\\input quotedefault.sty\n";
			stream << "%\n\\input tabdefault.sty\n";
			stream << "%\n\\input footnotedefault.sty\n";
			stream << "%\n\\input boxdefault.sty\n";
			stream << "%\n\\input articlefloatdefault.sty\n";
			stream << "%\n\\input articletocdefault.sty\n";
			stream << "%\n\\input articlebibdefault.sty\n";
			stream << "%\n\\input articleindexdefault.sty\n";
			stream << "%\n\\input articlepagedefault.sty\n";
			stream << "%\n\\input ";
			stream << dateFile;
			stream << "\n";
			stream << "%\n\\input articlemathdefault.sty\n";
			stream << "%\n\\input ";
			stream << mathFile;
			stream << "\n";
			stream << "%\n\\if@twoside\n\\else\n\\raggedbottom\n\\fi";
      stream << "\\if@twocolumn\n\\twocolumn\n\\sloppy\n\\flushbottom\n\\else\n\\onecolumn\n\\fi";
      stream << "\\endinput\n%\n%\n";
		  break;

		case XW_DOC_BOOK:
		  stream << "\\@titlepagetrue\n";
			stream << "\\@mainmattertrue\n";
			stream << "%\n\\ExecuteOptions{a5paper,";
			stream << fontSize;
			stream << ",oneside,twoside,final,openright}\n";
			stream << "\\ProcessOptions\n";
			stream << "%\n\\ninput bookheaddefault.sty\n";
			stream << "%\n\\input booktitledefault.sty\n";
			if (useCJK)
			  stream << "%\n\\input namesect.sty\n";
			stream << "%\n\\input booksectiondefault.sty\n";
			stream << "%\n\\input ";
			stream << sectionFile;
			stream << "\n";
			stream << "%\n\\input itemdefault.sty\n";
			stream << "%\n\\input quotedefault.sty\n";
			stream << "%\n\\input tabdefault.sty\n";
			stream << "%\n\\input footnotedefault.sty\n";
			stream << "%\n\\input boxdefault.sty\n";
			stream << "%\n\\input bookfloatdefault.sty\n";
			stream << "%\n\\input booktocdefault.sty\n";
			stream << "%\n\\input bookbibdefault.sty\n";
			stream << "%\n\\input bookindexdefault.sty\n";
			stream << "%\n\\input bookpagedefault.sty\n";
			stream << "%\n\\input ";
			stream << dateFile;
			stream << "\n";
			stream << "%\n\\input bookmathdefault.sty\n";
			stream << "%\n\\input ";
			stream << mathFile;
			stream << "\n";
			stream << "%\n\\if@twoside\n\\else\n\\raggedbottom\n\\fi";
      stream << "%\n\\if@twocolumn\n\\twocolumn\n\\sloppy\n\\flushbottom\n\\else\n\\onecolumn\n\\fi";
      stream << "\\endinput\n%\n%\n";
		  break;

		case XW_DOC_REPORT:
		  stream << "\\@titlepagetrue\n";
			stream << "\\@mainmattertrue\n";
			stream << "%\n\\ExecuteOptions{a4paper,";
			stream << fontSize;
			stream << ",oneside,twoside,final,openany}\n";
			stream << "\\ProcessOptions\n";
			stream << "%\n\\input reportheaddefault.sty\n";
			stream << "%\n\\input reporttitledefault.sty\n";
			if (useCJK)
			  stream << "%\n\\input namesect.sty\n";
			stream << "%\n\\input reportsectiondefault.sty\n";
			stream << "%\n\\input ";
			stream << sectionFile;
			stream << "\n";
			stream << "%\n\\input itemdefault.sty\n";
			stream << "%\n\\input quotedefault.sty\n";
			stream << "%\n\\input tabdefault.sty\n";
			stream << "%\n\\input footnotedefault.sty\n";
			stream << "%\n\\input boxdefault.sty\n";
			stream << "%\n\\input reportfloatdefault.sty\n";
			stream << "%\n\\input reporttocdefault.sty\n";
			stream << "%\n\\input reportbibdefault.sty\n";
			stream << "%\n\\input reportindexdefault.sty\n";
			stream << "%\n\\input reportpagedefault.sty\n";
			stream << "%\n\\input ";
			stream << dateFile;
			stream << "\n";
			stream << "%\n\\if@twoside\n\\else\n\\raggedbottom\n\\fi";
      stream << "\\if@twocolumn\n\\twocolumn\n\\sloppy\n\\flushbottom\n\\else\n\\onecolumn\n\\fi";
      stream << "\\endinput\n%\n%\n";
		  break;

		case XW_DOC_LETTER:
		  stream << "\\@titlepagefalse\n";
			stream << "\\@mainmatterfalse\n";
			stream << "%\n\\ExecuteOptions{letterpaper,";
			stream << fontSize;
			stream << ",oneside,onecolumn,final}\n";
			stream << "\\ProcessOptions\n";
			stream << "%\n\\input letterheaddefault\n";
			stream << "%\n\\input ";
			stream << letterSec;
			stream << "\n";
			stream << "%\n\\input letteritemdefault.sty\n";
			stream << "%\n\\input itemdefault.sty\n";
			stream << "%\n\\input quotedefault.sty\n";
			stream << "%\n\\input tabdefault.sty\n";
			stream << "%\n\\input footnotedefault.sty\n";
			stream << "%\n\\input letterfootnotedefault.sty\n";
			stream << "%\n\\input boxdefault.sty\n";
			stream << "%\n\\input ";
			stream << dateFile;
			stream << "\n";
			stream << "\\onecolumn\n\\endinput\n%\n%\n";
		  break;
	}

	file.close();
	QString lsr = path + "tex/tex.lsr";
	if (QFile::exists(lsr))
  	QFile::remove(lsr);

	XWTexSea sea;
	sea.addFile(cls);
}

void XWMyDocument::createDoc()
{
	QFile file(fileName);
	file.open(QFile::WriteOnly | QFile::Truncate);
	QTextStream stream(&file);
  stream.setGenerateByteOrderMark(false);
	stream.setCodec("UTF-8");

  stream << "%&";
	stream << formatName;
	stream << "     -*- coding: UTF-8 -*-\n%  document generated by xiuwen LaTeX editor\n%\n";
	stream << "\\documentclass{";
	stream << className;
	stream << "}\n";
	if (useCJK)
	  stream << "\\usepackage{xwcjk}\n";
	stream << "\\usepackage{tikz}\n";
	stream << "\\usepackage[colorlinks=true,linkcolor=black]{hyperref}\n";
	
	switch (docClass)
	{
		default:
		  stream << "\\title{";
	    stream << title;
	    stream << "}\n";
	    stream << "\\author{";
	    stream << author;
	    stream << "}\n";
	    stream << "\\date{\\today}\n";
		  stream << "\\begin{document}\n";
		  stream << "\\maketitle\n\n";
			stream << "text\n\n";
		  break;

		case XW_DOC_LETTER:
		  if (!name.isEmpty())
			{
				stream << "\\name{";
			  stream << name;
			  stream << "}\n";
			}
		  if (!signature.isEmpty())
			{
				stream << "\\signature{";
			  stream << signature;
			  stream << "}\n";
			}
		  if (!address.isEmpty())
			{
				stream << "\\address{";
			  stream << address;
			  stream << "}\n";
			}
			if (!location.isEmpty())
			{
				stream << "\\location{";
			  stream << location;
			  stream << "}\n";
			}
			if (!telephone.isEmpty())
			{
				stream << "\\telephone{";
			  stream << telephone;
			  stream << "}\n";
			}
			if (!cc.isEmpty())
			{
				stream << "\\cc{";
			  stream << cc;
			  stream << "}\n";
			}
		  stream << "\\begin{document}\n\\begin{letter}\n";
			stream << "\\opening{";
			stream << opening;
			stream << "}\n";
			stream << "text\n\n";
			stream << "\\closing{";
			stream << closing;
			stream << "}\n";
			if (!ps.isEmpty())
			{
				stream << "\\ps{";
				stream << ps;
				stream << "}\n";
			}
			if (!encl.isEmpty())
			{
				stream << "\\encl{";
				stream << encl;
				stream << "}\n";
			}
			stream << "\\end{letter}\n";
		  break;

		case XW_DOC_BEAMER:
		  stream << "\\title{";
	    stream << title;
	    stream << "}\n";
	    stream << "\\author{";
	    stream << author;
	    stream << "}\n";
	    stream << "\\date{\\today}\n";
		  if (!subtitle.isEmpty())
			{
				stream << "\\subtitle{";
				stream << subtitle;
				stream << "}\n";
			}
			if (!institute.isEmpty())
			{
				stream << "\\institute{";
				stream << institute;
				stream << "}\n";
			}
			if (!keywords.isEmpty())
			{
				stream << "\\keywords{";
				stream << keywords;
				stream << "}\n";
			}
		  stream << "\\begin{document}\n";
		  stream << "\\begin{frame}\n\\titlepage\n\\end{frame}\n";
			stream << "\\begin{frame}text\n\n\\end{frame}\n";
		  break;
	}

	stream << "\\end{document}\n";

	file.close();
	QString lsr = path + "doc/doc.lsr";
	if (QFile::exists(lsr))
  	QFile::remove(lsr);
}

void XWMyDocument::createFormat()
{
	if (useOldFormat)
	  return ;

	mediumNormal.setTeXFont();
	mediumSlanted.setTeXFont();
	mediumItalic.setTeXFont();
	mediumCapsSmallCaps.setTeXFont();
	boldNormal.setTeXFont();
	boldExtendedNormal.setTeXFont();
	boldExtendedItalic.setTeXFont();
	boldExtendedSlanted.setTeXFont();
	boldExtendedCapsSmallCaps.setTeXFont();
	mediumUltraItalic.setTeXFont();

	QString ini = QString("%1tex/xiuwen/config/%2.ini").arg(path).arg(formatName);
	QFile file(ini);
	file.open(QFile::WriteOnly | QFile::Truncate);
	QTextStream stream(&file);
  stream.setGenerateByteOrderMark(false);
	stream.setCodec("UTF-8");

	formatName = "latex";
	QString strtmp = mediumNormal.family.remove(QChar(' '));
	formatName += strtmp;

	stream << "%     -*- coding: UTF-8 -*-\n%  format generated by xiuwen LaTeX editor\n%\n";

	stream << "%\n\\input initialize.ltx\n";

	stream << "%\n\\input textfontlatex.ltx\n";

	stream << "%\n\\input mathfontlatex.ltx\n";

	stream << "%\n\\begingroup\n\\nfss@catcodes\n";

	stream << "\\DeclareFontFamily{OT1}{";
	stream << strtmp;
	stream << "}\n";

	mediumNormal.writeStream(stream);
	mediumSlanted.writeStream(stream);
	mediumItalic.writeStream(stream);
	mediumCapsSmallCaps.writeStream(stream);
	boldNormal.writeStream(stream);
	boldExtendedNormal.writeStream(stream);
	boldExtendedItalic.writeStream(stream);
	boldExtendedSlanted.writeStream(stream);
	boldExtendedCapsSmallCaps.writeStream(stream);
	mediumUltraItalic.writeStream(stream);

	stream << "\\endgroup\n";

	stream << "%\n\\DeclareErrorFont{OT1}{";
	stream << strtmp;
	stream << "}{m}{n}{10}";
	stream << "%\n\\newcommand\\";
	stream << strtmp;
	stream << "default{";
	stream << strtmp;
	stream << "}\n";
	stream << "\\newcommand\\bfdefault{bx}\n";
	stream << "\\newcommand\\mddefault{m}\n";
	stream << "\\newcommand\\itdefault{it}\n";
	stream << "\\newcommand\\sldefault{sl}\n";
	stream << "\\newcommand\\scdefault{sc}\n";
	stream << "\\newcommand\\updefault{n}\n";
	stream << "\\newcommand\\seriesdefault{\\mddefault}\n";
	stream << "\\newcommand\\shapedefault{\\updefault}\n";
	stream << "\\newcommand\\encodingdefault{OT1}\n";

	stream << "\\newcommand\\familydefault{\\";
	stream << strtmp;
	stream << "default}\n";

	stream << "%\n\\DeclarePreloadSizes{OT1}{";
	stream << strtmp;
	stream << "}{m}{n}{10}\n";

	stream << "%\n\\input{";
	stream << hyphen;
	stream << "}\n";
	stream << "%\n\\input dump.ltx\n";
	stream << "%\n\\endinput\n%\n%\n";

	file.close();

	XWTexSea sea;
	sea.addFile(ini);

	XWTeXFormatSetting setting;
	setting.setFormat(formatName);
	QString str = QString(tr("generated by xiuwen LaTeX editor"));
	setting.setDescription(str);
	setting.setInput(formatName);
	setting.setBound("main_memory",10000000);
	setting.setBound("max_in_open",100);
	setting.setBound("stack_size",1000);
	setting.setBound("ocp_buf_size",500000);
	setting.setBound("ocp_stack_size",10000);
	setting.setBound("ocp_list_size",1000);
	setting.setBound("pool_size",2500000);

  QString cnf = path + "bin/texmf.cnf";
	QFile mf(cnf);
	mf.open(QIODevice::WriteOnly | QIODevice::Append);
	QTextStream stm(&mf);
	stm << "TEXINPUTS." << formatName;
	stm << " = $TEXTOPDIR/{xiuwen,latex,generic,omega,}//\n";
	mf.close();

	QString lsr = path + "tex/tex.lsr";
	if (QFile::exists(lsr))
  	QFile::remove(lsr);
}

void XWMyDocument::setEditorFont()
{
	QSettings * settings = xwApp->getSettings();
  settings->beginGroup("DocumentStyles");
	QString curstyle = settings->value("CurrentDocumentStyle").toString();

	if (!curstyle.isEmpty())
    settings->beginGroup(curstyle);

  settings->beginGroup("Normal");
  settings->setValue("Family",family);
	settings->endGroup();
	settings->beginGroup("Bold");
  settings->setValue("Family",boldFamily);
	settings->endGroup();
	settings->beginGroup("Italic");
  settings->setValue("Family",italicFamily);
	settings->endGroup();

  if (!curstyle.isEmpty())
	  settings->endGroup();
	settings->endGroup();

	settings->endGroup();
}

XWLaTeXWizard::XWLaTeXWizard(QWidget *parent)
:QWizard(parent)
{
	QString path = QCoreApplication::applicationDirPath();
	int idx = path.lastIndexOf(QChar('/'));
	if (idx > 0)
		path = path.left(idx + 1);

	if (path[path.length() - 1] != QChar('/'))
		path += QChar('/');

	doc.path = path;

	setWindowTitle(tr("New File Wizard"));

	setPage(Page_FileName, new XWLaTeXFileNamePage(&doc));
	setPage(Page_DocClass, new XWLaTeXDocClassPage(&doc));
	setPage(Page_Book, new XWLaTeXBookPage(&doc));
	setPage(Page_Letter, new XWLaTeXLetterPage(&doc));
	setPage(Page_Beamer, new XWLaTeXBeamerPage(&doc));
	setPage(Page_ClassList, new XWLaTeXClassListPage(&doc));
	setPage(Page_ClassParam, new XWLaTeXClassParamPage(&doc));
	setPage(Page_Format, new XWLaTeXFormatPage(&doc));
	setPage(Page_FormatList, new XWLaTeXFormatListPage(&doc));
	setPage(Page_MediumNormal, new XWLaTeXMediumNormalPage(&doc));
	setPage(Page_MediumSlanted, new XWLaTeXMediumSlantPage(&doc));
	setPage(Page_MediumItalic, new XWLaTeXMediumItalicPage(&doc));
	setPage(Page_MediumCapsSmallCaps, new XWLaTeXMediumCapsSmallCapsPage(&doc));
	setPage(Page_BoldNormal, new XWLaTeXBoldNormalPage(&doc));
	setPage(Page_BoldExtendedNormal, new XWLaTeXBoldExtendedNormalPage(&doc));
	setPage(Page_BoldExtendedItalic, new XWLaTeXBoldExtendedItalicPage(&doc));
	setPage(Page_BoldExtendedSlanted, new XWLaTeXBoldExtendedSlantedPage(&doc));
	setPage(Page_BoldExtendedCapsSmallCaps, new XWLaTeXBoldExtendedCapsSmallCapsPage(&doc));
	setPage(Page_MediumUltraItalic, new XWLaTeXMediumUltraItalicPage(&doc));
}

void XWLaTeXWizard::accept()
{
	doc.createFormat(); 
	doc.createClass();
	doc.createDoc();
	doc.setEditorFont();

	emit fileNameChanged(doc.fileName);

	QDialog::accept();
}

XWLaTeXFileNamePage::XWLaTeXFileNamePage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("File Name"));

	topLabel = new QLabel(tr("Please input the file name that your document is on disk:"));

	fileName = new QLineEdit;
	QString path = doc->path;
	path += "doc/tex/";
	fileName->setText(path);

	browse = new QPushButton(tr("Browse"));
	connect(browse, SIGNAL(clicked()), this, SLOT(open()));

	QHBoxLayout * namelayout = new QHBoxLayout;
	namelayout->addWidget(fileName,1);
  namelayout->addWidget(browse);

	QVBoxLayout * layout = new QVBoxLayout;
	layout->addWidget(topLabel);
	layout->addLayout(namelayout);

	setLayout(layout);
}

int XWLaTeXFileNamePage::nextId() const
{
	doc->useOldClass = true;
	doc->useOldFormat = true;
	doc->fileName = fileName->text();
	return XWLaTeXWizard::Page_DocClass;
}

void XWLaTeXFileNamePage::open()
{
	QString path = doc->path;
	path += "doc/tex/";
	doc->fileName = QFileDialog::getSaveFileName(this, tr("Save file"),
                            path, tr("tex file (*.tex)"));
	fileName->setText(doc->fileName);
}

XWLaTeXDocClassPage::XWLaTeXDocClassPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Document Class"));

  QGroupBox *groupBox = new QGroupBox(tr("Which class is your document:"));

	artical = new QRadioButton("artical", this);
	artical->setChecked(true);
	book = new QRadioButton("book", this);
	report = new QRadioButton("report", this);
	letter = new QRadioButton("letter", this);
	beamer = new QRadioButton("beamer", this);
	listClasses = new QRadioButton("in my class list", this);
	newClass = new QRadioButton("new class for text orientation, new language", this);

	QVBoxLayout *vbox = new QVBoxLayout;
	vbox->addWidget(artical);
	vbox->addWidget(book);
	vbox->addWidget(report);
	vbox->addWidget(letter);
	vbox->addWidget(beamer);
	vbox->addWidget(listClasses);
	vbox->addWidget(newClass);
	groupBox->setLayout(vbox);

	QVBoxLayout * layout = new QVBoxLayout;
	layout->addWidget(groupBox);
	setLayout(layout);
}

int XWLaTeXDocClassPage::nextId() const
{
	doc->useOldClass = true;
	doc->useOldFormat = true;

	if (listClasses->isChecked())
	  return XWLaTeXWizard::Page_ClassList;

	if (newClass->isChecked())
	  return XWLaTeXWizard::Page_ClassParam;

	if (artical->isChecked())
	{
		doc->docClass = XW_DOC_ARTICLE;
		return XWLaTeXWizard::Page_Book;
	}

	if (book->isChecked())
	{
		doc->docClass = XW_DOC_BOOK;
		return XWLaTeXWizard::Page_Book;
	}

	if (report->isChecked())
	{
		doc->docClass = XW_DOC_REPORT;
		return XWLaTeXWizard::Page_Book;
	}

	if (letter->isChecked())
	{
		doc->docClass = XW_DOC_LETTER;
		return XWLaTeXWizard::Page_Letter;
	}

	doc->docClass = XW_DOC_BEAMER;
	return XWLaTeXWizard::Page_Beamer;
}

XWLaTeXBookPage::XWLaTeXBookPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Your Document"));

	QLabel * tlabel = new QLabel(tr("title:"));
	title = new QLineEdit;

	QLabel * alabel = new QLabel(tr("author:"));
	author = new QLineEdit;

	useCJK = new QCheckBox("use CJK", this);

	QGridLayout *layout = new QGridLayout;
	layout->addWidget(tlabel,0,0);
	layout->addWidget(title,0,1);
	layout->addWidget(alabel,1,0);
	layout->addWidget(author,1,1);
	layout->addWidget(useCJK,2,1);

	setLayout(layout);
}

int XWLaTeXBookPage::nextId() const
{
	doc->useOldClass = true;
	doc->useOldFormat = true;
	doc->title = title->text();
	doc->author = author->text();
	doc->useCJK = useCJK->isChecked();
	return XWLaTeXWizard::Page_Format;
}

XWLaTeXLetterPage::XWLaTeXLetterPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Your Letter"));

	QLabel * slabel = new QLabel(tr("signature:"));
	signature = new QLineEdit;

	QLabel * alabel = new QLabel(tr("address:"));
	address = new QLineEdit;

	QLabel * olabel = new QLabel(tr("opening:"));
	opening = new QLineEdit;

	QLabel * cllabel = new QLabel(tr("closing:"));
	closing = new QLineEdit;

	QLabel * pslabel = new QLabel(tr("ps:"));
	ps = new QLineEdit;

	QLabel * enlabel = new QLabel(tr("encl:"));
	encl = new QLineEdit;

	QLabel * cclabel = new QLabel(tr("cc:"));
	cc = new QLineEdit;

	useCJK = new QCheckBox("use CJK", this);

	QGridLayout *layout = new QGridLayout;
	layout->addWidget(slabel,0,0);
	layout->addWidget(signature,0,1);
	layout->addWidget(alabel,1,0);
	layout->addWidget(address,1,1);
	layout->addWidget(olabel,2,0);
	layout->addWidget(opening,2,1);
	layout->addWidget(cllabel,3,0);
	layout->addWidget(closing,3,1);
	layout->addWidget(pslabel,4,0);
	layout->addWidget(ps,4,1);
	layout->addWidget(enlabel,5,0);
	layout->addWidget(encl,5,1);
	layout->addWidget(cclabel,6,0);
	layout->addWidget(cc,6,1);
	layout->addWidget(useCJK,7,1);

	setLayout(layout);
}

int XWLaTeXLetterPage::nextId() const
{
	doc->useOldClass = true;
	doc->useOldFormat = true;
	doc->signature = signature->text();
	doc->address = address->text();
	doc->opening = opening->text();
	doc->closing = closing->text();
	doc->ps = ps->text();
	doc->encl = encl->text();
	doc->cc = cc->text();
	doc->useCJK = useCJK->isChecked();
	return XWLaTeXWizard::Page_Format;
}

XWLaTeXBeamerPage::XWLaTeXBeamerPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Your Beamer"));

	QLabel * tlabel = new QLabel(tr("title:"));
	title = new QLineEdit;

	QLabel * slabel = new QLabel(tr("subtitle:"));
	subtitle = new QLineEdit;

	QLabel * alabel = new QLabel(tr("author:"));
	author = new QLineEdit;

	QLabel * ilabel = new QLabel(tr("institute:"));
	institute = new QLineEdit;

	useCJK = new QCheckBox("use CJK", this);

	QGridLayout *layout = new QGridLayout;
	layout->addWidget(tlabel,0,0);
	layout->addWidget(title,0,1);
	layout->addWidget(slabel,1,0);
	layout->addWidget(subtitle,1,1);
	layout->addWidget(alabel,2,0);
	layout->addWidget(author,2,1);
	layout->addWidget(ilabel,3,0);
	layout->addWidget(institute,3,1);
	layout->addWidget(useCJK,4,1);

	setLayout(layout);
}

int XWLaTeXBeamerPage::nextId() const
{
	doc->useOldClass = true;
	doc->useOldFormat = true;
	doc->title = title->text();
	doc->subtitle = subtitle->text();
	doc->author = author->text();
	doc->institute = institute->text();
	doc->useCJK = useCJK->isChecked();
	return XWLaTeXWizard::Page_Format;
}

XWLaTeXClassListPage::XWLaTeXClassListPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Class List"));

	list = new QComboBox;

	QString path = doc->path;
	path += "tex/xiuwen/class";
	QDir dir(path);

	QStringList filter;
	filter << ".cls";

	QStringList files = dir.entryList(filter, QDir::Files,QDir::Name);
	for (int i = 0; i < files.size(); ++i)
	{
		XWFileName fn(files[i]);
		QString f = fn.fileName();
		list->addItem(f);
	}

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addWidget(list);
	setLayout(layout);
}

int XWLaTeXClassListPage::nextId() const
{
	doc->useOldClass = true;
	doc->className = list->currentText();

	return XWLaTeXWizard::Page_Format;
}

XWLaTeXClassParamPage::XWLaTeXClassParamPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Your Class"));

  QLabel * clslabel = new QLabel(tr("class name"));
	className = new QLineEdit;
	className->setText("NewClass");

	QLabel * lslabel = new QLabel(tr("line skip"));
	lineSkip = new QComboBox;
	lineSkip->addItem("1.5");
	lineSkip->addItem("1.6");
	lineSkip->addItem("1.7");
	lineSkip->addItem("1.8");
	lineSkip->addItem("1.9");
	lineSkip->addItem("2.0");

	QLabel * orlabel = new QLabel(tr("text orientation"));
	orientation = new QComboBox;
	orientation->addItem(tr("horizontal, left to right"), TEX_DOC_WD_TLT);
	orientation->addItem(tr("vertical, right to left"), TEX_DOC_WD_RTT);
	orientation->addItem(tr("horizontal, right to left"), TEX_DOC_WD_TRT);
	orientation->addItem(tr("vertical, left to right"), TEX_DOC_WD_LTL);

	QLabel * fslabel = new QLabel(tr("text font size"));
	fontSize = new QComboBox;
	fontSize->addItem("10pt");
	fontSize->addItem("11pt");
	fontSize->addItem("12pt");
	fontSize->addItem("xiaowuhao");
	fontSize->addItem("wuhao");
	fontSize->addItem("xiaosihao");
	fontSize->addItem("sihao");
	fontSize->addItem("sanhao");

	QLabel * numlabel = new QLabel(tr("number define file"));
	numberFile = new QComboBox;
	QString numpath = QString("%1tex/xiuwen/number");
	QDir numdir(numpath);

	QStringList filter;
	filter << ".sty";

	QStringList files = numdir.entryList(filter, QDir::Files,QDir::Name);
	numberFile->addItems(files);

	QLabel * datelabel = new QLabel(tr("date define file"));
	dateFile = new QComboBox;
	QString datepath = QString("%1tex/xiuwen/date");
	QDir datedir(datepath);
	files = datedir.entryList(filter, QDir::Files,QDir::Name);
	dateFile->addItems(files);

	QLabel * seclabel = new QLabel(tr("section name file"));
	sectionFile = new QComboBox;
	QString secpath = QString("%1tex/xiuwen/section/language");
	QDir secdir(secpath);
	files = secdir.entryList(filter, QDir::Files,QDir::Name);
	sectionFile->addItems(files);

	QLabel * mathlabel = new QLabel(tr("math name file"));
	mathFile = new QComboBox;
	QString mathpath = QString("%1tex/xiuwen/math/language");
	QDir mathdir(mathpath);
	files = secdir.entryList(filter, QDir::Files,QDir::Name);
	mathFile->addItems(files);

	useCJK = new QCheckBox("use CJK", this);

	QGridLayout *layout = new QGridLayout;
	layout->addWidget(clslabel,0,0);
	layout->addWidget(className,0,1);
	layout->addWidget(lslabel,1,0);
	layout->addWidget(lineSkip,1,1);
	layout->addWidget(orlabel,2,0);
	layout->addWidget(orientation,2,1);
	layout->addWidget(fslabel,3,0);
	layout->addWidget(fontSize,3,1);
	layout->addWidget(numlabel,4,0);
	layout->addWidget(numberFile,4,1);
	layout->addWidget(datelabel,5,0);
	layout->addWidget(dateFile,5,1);
	layout->addWidget(seclabel,6,0);
	layout->addWidget(sectionFile,6,1);
	layout->addWidget(mathlabel,7,0);
	layout->addWidget(mathFile,7,1);
	layout->addWidget(useCJK,8,1);

	setLayout(layout);
}

int XWLaTeXClassParamPage::nextId() const
{
	doc->useOldClass = false;
	doc->className = className->text();
	QString tmp = lineSkip->currentText();
	double l = tmp.toDouble();
	l *= 10;
	doc->lineSkip = QString("hangju%1.sty").arg(l);
	int index = orientation->currentIndex();
	doc->orientation = orientation->itemData(index).toInt();
	doc->fontSize = fontSize->currentText();
	doc->numberFile = numberFile->currentText();
	doc->dateFile = dateFile->currentText();
	doc->sectionFile = sectionFile->currentText();
	doc->mathFile = mathFile->currentText();
	doc->useCJK = useCJK->isChecked();
	return XWLaTeXWizard::Page_Format;
}

XWLaTeXFormatPage::XWLaTeXFormatPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Format"));

	QGroupBox *groupBox = new QGroupBox(tr("Which format your document is builded with:"));

	list = new QRadioButton("from my list", this);
	list->setChecked(true);
	newFormat = new QRadioButton("new format for new language, font", this);

	QVBoxLayout *vbox = new QVBoxLayout;
	vbox->addWidget(list);
	vbox->addWidget(newFormat);
	groupBox->setLayout(vbox);

	QVBoxLayout * layout = new QVBoxLayout;
	layout->addWidget(groupBox);
	setLayout(layout);
}

int XWLaTeXFormatPage::nextId() const
{
	doc->useOldFormat = true;
	if (list->isChecked())
	  return XWLaTeXWizard::Page_FormatList;

	return XWLaTeXWizard::Page_MediumNormal;
}

XWLaTeXFormatListPage::XWLaTeXFormatListPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Format List"));

	list = new QComboBox;
  XWTeXFormatSetting setting;
	QStringList all = setting.allFormats();
	list->addItems(all);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addWidget(list);
	setLayout(layout);
}

int XWLaTeXFormatListPage::nextId() const
{
	doc->useOldFormat = true;
	doc->formatName = list->currentText();
	return -1;
}

XWLaTeXMediumNormalPage::XWLaTeXMediumNormalPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Medium Normal Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);	

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);	

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXMediumNormalPage::nextId() const
{
	doc->useOldFormat = false;
	doc->mediumNormal.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->mediumNormal.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->mediumNormal.family = tmpstr.toQString();
		}
		doc->mediumNormal.pid = font->getPlatformID();
		doc->mediumNormal.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->mediumNormal.sizes = "<-> s * [0.92469]";
	  else
	    doc->mediumNormal.sizes = "<->";
	}

	return XWLaTeXWizard::Page_MediumSlanted;
}

void XWLaTeXMediumNormalPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, 0, 0, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXMediumNormalPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, 0, 0, 0, false, false, encname, -1);
}

XWLaTeXMediumSlantPage::XWLaTeXMediumSlantPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Medium Slant Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);		

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);		

	slantLabel = new QLabel(tr("Slant:"));
  slantBox = new QDoubleSpinBox;
  slantBox->setRange(0.0, 1.0);
  slantBox->setValue(0.0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	QHBoxLayout * slantlayout = new QHBoxLayout;
  slantlayout->addWidget(slantLabel);
  slantlayout->addWidget(slantBox);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addLayout(slantlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));
	connect(slantBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXMediumSlantPage::nextId() const
{
	doc->useOldFormat = false;
	doc->mediumSlanted.slant = slantBox->value();
	doc->mediumSlanted.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->mediumSlanted.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->mediumSlanted.family = tmpstr.toQString();
		}
		doc->mediumSlanted.pid = font->getPlatformID();
		doc->mediumSlanted.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->mediumSlanted.sizes = "<-> s * [0.92469]";
	  else
	    doc->mediumSlanted.sizes = "<->";
	}

	return XWLaTeXWizard::Page_MediumItalic;
}

void XWLaTeXMediumSlantPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, 0, s, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXMediumSlantPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, 0, s, 0, false, false, encname, -1);
}

XWLaTeXMediumItalicPage::XWLaTeXMediumItalicPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Medium Italic Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);	

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);	

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXMediumItalicPage::nextId() const
{
	doc->useOldFormat = false;
	doc->mediumItalic.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->mediumItalic.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->mediumItalic.family = tmpstr.toQString();
		}
		doc->mediumItalic.pid = font->getPlatformID();
		doc->mediumItalic.eid = font->getEncodingID();
	}

	if (font->isFixedWidth())
	  doc->mediumItalic.sizes = "<-> s * [0.92469]";
	else
	  doc->mediumItalic.sizes = "<->";

	return XWLaTeXWizard::Page_MediumCapsSmallCaps;
}

void XWLaTeXMediumItalicPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, 0, 0, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXMediumItalicPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, 0, 0, 0, false, false, encname, -1);
}

XWLaTeXMediumCapsSmallCapsPage::XWLaTeXMediumCapsSmallCapsPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Medium Caps Small Caps Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXMediumCapsSmallCapsPage::nextId() const
{
	doc->useOldFormat = false;
	doc->mediumCapsSmallCaps.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->mediumCapsSmallCaps.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->mediumCapsSmallCaps.family = tmpstr.toQString();
		}
		doc->mediumCapsSmallCaps.pid = font->getPlatformID();
		doc->mediumCapsSmallCaps.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->mediumCapsSmallCaps.sizes = "<-> s * [0.92469]";
	  else
	    doc->mediumCapsSmallCaps.sizes = "<->";
	}

	return XWLaTeXWizard::Page_BoldNormal;
}

void XWLaTeXMediumCapsSmallCapsPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, 0, 0, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXMediumCapsSmallCapsPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, 0, 0, 0, false, false, encname, -1);
}

XWLaTeXBoldNormalPage::XWLaTeXBoldNormalPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Medium Bold Normal Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXBoldNormalPage::nextId() const
{
	doc->useOldFormat = false;
	doc->boldNormal.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->boldNormal.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->boldNormal.family = tmpstr.toQString();
		}
		doc->boldNormal.pid = font->getPlatformID();
		doc->boldNormal.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->boldNormal.sizes = "<-> s * [0.92469]";
	  else
	    doc->boldNormal.sizes = "<->";
	}

	return XWLaTeXWizard::Page_BoldExtendedNormal;
}

void XWLaTeXBoldNormalPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, 0, 0, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXBoldNormalPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, 0, 0, 0, false, false, encname, -1);
}

XWLaTeXBoldExtendedNormalPage::XWLaTeXBoldExtendedNormalPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Bold Extended Normal Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);	

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);	

	efacterLabel = new QLabel(tr("Extend:"));
  efacterBox = new QDoubleSpinBox;
  efacterBox->setRange(0.01, 1.0);
  efacterBox->setValue(1.0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	QHBoxLayout * efactorlayout = new QHBoxLayout;
  efactorlayout->addWidget(efacterLabel);
  efactorlayout->addWidget(efacterBox);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addLayout(efactorlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));
	connect(efacterBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));

	displayFont();
}


int XWLaTeXBoldExtendedNormalPage::nextId() const
{
	doc->useOldFormat = false;
	doc->boldExtendedNormal.slant = efacterBox->value();
	doc->boldExtendedNormal.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->boldExtendedNormal.index = istr.toInt();
  QString unknown = tr("Unknown");
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->boldExtendedNormal.family = tmpstr.toQString();
		}
		doc->boldExtendedNormal.pid = font->getPlatformID();
		doc->boldExtendedNormal.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->boldExtendedNormal.sizes = "<-> s * [0.92469]";
	  else
	    doc->boldExtendedNormal.sizes = "<->";
	}

	return XWLaTeXWizard::Page_BoldExtendedItalic;
}

void XWLaTeXBoldExtendedNormalPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, e, 0, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXBoldExtendedNormalPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, e, 0, 0, false, false, encname, -1);
}

XWLaTeXBoldExtendedItalicPage::XWLaTeXBoldExtendedItalicPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Bold Extended Italic Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);	

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);	

	efacterLabel = new QLabel(tr("Extend:"));
  efacterBox = new QDoubleSpinBox;
  efacterBox->setRange(0.01, 1.0);
  efacterBox->setValue(1.0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	QHBoxLayout * efactorlayout = new QHBoxLayout;
  efactorlayout->addWidget(efacterLabel);
  efactorlayout->addWidget(efacterBox);
	slantLabel = new QLabel(tr("Slant:"));
  slantBox = new QDoubleSpinBox;
  slantBox->setRange(0.0, 1.0);
  slantBox->setValue(0.0);

	QHBoxLayout * slantlayout = new QHBoxLayout;
  slantlayout->addWidget(slantLabel);
  slantlayout->addWidget(slantBox);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addLayout(efactorlayout);
	layout->addLayout(slantlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));
	connect(efacterBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));
  connect(slantBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXBoldExtendedItalicPage::nextId() const
{
	doc->useOldFormat = false;
	doc->boldExtendedItalic.slant = slantBox->value();
	doc->boldExtendedItalic.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->boldExtendedItalic.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->boldExtendedItalic.family = tmpstr.toQString();
		}
		doc->boldExtendedItalic.pid = font->getPlatformID();
		doc->boldExtendedItalic.eid = font->getEncodingID();
		if (font->isFixedWidth())
	    doc->boldExtendedItalic.sizes = "<-> s * [0.92469]";
	  else
	    doc->boldExtendedItalic.sizes = "<->";
	}

	return XWLaTeXWizard::Page_BoldExtendedSlanted;
}

void XWLaTeXBoldExtendedItalicPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, e, s, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXBoldExtendedItalicPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, e, s, 0, false, false, encname, -1);
}

XWLaTeXBoldExtendedSlantedPage::XWLaTeXBoldExtendedSlantedPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Bold Extended Slanted Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);	

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);	

	efacterLabel = new QLabel(tr("Extend:"));
  efacterBox = new QDoubleSpinBox;
  efacterBox->setRange(0.01, 1.0);
  efacterBox->setValue(1.0);
	slantLabel = new QLabel(tr("Slant:"));
  slantBox = new QDoubleSpinBox;
  slantBox->setRange(0.0, 1.0);
  slantBox->setValue(0.0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	QHBoxLayout * efactorlayout = new QHBoxLayout;
  efactorlayout->addWidget(efacterLabel);
  efactorlayout->addWidget(efacterBox);

	QHBoxLayout * slantlayout = new QHBoxLayout;
  slantlayout->addWidget(slantLabel);
  slantlayout->addWidget(slantBox);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addLayout(efactorlayout);
	layout->addLayout(slantlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));
	connect(efacterBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));
  connect(slantBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXBoldExtendedSlantedPage::nextId() const
{
	doc->useOldFormat = false;
	doc->boldExtendedSlanted.slant = slantBox->value();
	doc->boldExtendedSlanted.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->boldExtendedSlanted.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->boldExtendedSlanted.family = tmpstr.toQString();
		}
		doc->boldExtendedSlanted.pid = font->getPlatformID();
		doc->boldExtendedSlanted.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->boldExtendedSlanted.sizes = "<-> s * [0.92469]";
	  else
	    doc->boldExtendedSlanted.sizes = "<->";
	}

	return XWLaTeXWizard::Page_BoldExtendedCapsSmallCaps;
}

void XWLaTeXBoldExtendedSlantedPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, e, s, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));		
}

void XWLaTeXBoldExtendedSlantedPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, e, s, 0, false, false, encname, -1);
}

XWLaTeXBoldExtendedCapsSmallCapsPage::XWLaTeXBoldExtendedCapsSmallCapsPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Bold Extended Caps Small Caps Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);	

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);	

	efacterLabel = new QLabel(tr("Extend:"));
  efacterBox = new QDoubleSpinBox;
  efacterBox->setRange(0.01, 1.0);
  efacterBox->setValue(1.0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	QHBoxLayout * efactorlayout = new QHBoxLayout;
  efactorlayout->addWidget(efacterLabel);
  efactorlayout->addWidget(efacterBox);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addLayout(efactorlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));
	connect(efacterBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXBoldExtendedCapsSmallCapsPage::nextId() const
{
	doc->useOldFormat = false;
	doc->boldExtendedCapsSmallCaps.slant = efacterBox->value();
	doc->boldExtendedCapsSmallCaps.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->boldExtendedCapsSmallCaps.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->boldExtendedCapsSmallCaps.family = tmpstr.toQString();
		}
		doc->boldExtendedCapsSmallCaps.pid = font->getPlatformID();
		doc->boldExtendedCapsSmallCaps.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->boldExtendedCapsSmallCaps.sizes = "<-> s * [0.92469]";
	  else
	    doc->boldExtendedCapsSmallCaps.sizes = "<->";
	}

	return XWLaTeXWizard::Page_MediumUltraItalic;
}

void XWLaTeXBoldExtendedCapsSmallCapsPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, e, 0, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));	
}

void XWLaTeXBoldExtendedCapsSmallCapsPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, e, 0, 0, false, false, encname, -1);
}

XWLaTeXMediumUltraItalicPage::XWLaTeXMediumUltraItalicPage(XWMyDocument * docA, QWidget *parent)
:QWizardPage(parent),
 doc(docA)
{
	setTitle(tr("Medium Ultra Italic Font In Your Format"));

  fontFileLabel = new QLabel(tr("Font file:"));
  fontFileCombo = new QComboBox;
    
  XWFontSea sea;
  QStringList listft = sea.getSystemFiles();
	fontFileCombo->addItems(listft);
	fontFileCombo->setCurrentIndex(0);

	indexLabel = new QLabel(tr("Face index:"));
  indexCombo = new QComboBox;
  indexCombo->addItem("0");
	indexCombo->setCurrentIndex(0);

	efacterLabel = new QLabel(tr("Extend:"));
  efacterBox = new QDoubleSpinBox;
  efacterBox->setRange(0.01, 1.0);
  efacterBox->setValue(1.0);
	slantLabel = new QLabel(tr("Slant:"));
  slantBox = new QDoubleSpinBox;
  slantBox->setRange(0.0, 1.0);
  slantBox->setValue(0.0);

	QHBoxLayout * filelayout = new QHBoxLayout;
  filelayout->addWidget(fontFileLabel);
  filelayout->addWidget(fontFileCombo);
    
  QHBoxLayout * indexlayout = new QHBoxLayout;
  indexlayout->addWidget(indexLabel);
  indexlayout->addWidget(indexCombo);

	QHBoxLayout * efactorlayout = new QHBoxLayout;
  efactorlayout->addWidget(efacterLabel);
  efactorlayout->addWidget(efacterBox);

	QHBoxLayout * slantlayout = new QHBoxLayout;
  slantlayout->addWidget(slantLabel);
  slantlayout->addWidget(slantBox);

	scrollArea = new QScrollArea;
  characterWidget = new XWCharacterWidget;
  scrollArea->setWidget(characterWidget);

	QVBoxLayout *layout = new QVBoxLayout;
	layout->addLayout(filelayout);
	layout->addLayout(indexlayout);
	layout->addLayout(efactorlayout);
	layout->addLayout(slantlayout);
	layout->addWidget(scrollArea);
	setLayout(layout);

	connect(fontFileCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(changeFile()));
	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));
	connect(efacterBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));
  connect(slantBox, SIGNAL(valueChanged(double)), this, SLOT(displayFont()));

	changeFile();
}

int XWLaTeXMediumUltraItalicPage::nextId() const
{
	doc->useOldFormat = false;
	doc->mediumUltraItalic.slant = slantBox->value();
	doc->mediumUltraItalic.fontFile = fontFileCombo->currentText();
	QString istr = indexCombo->currentText();
	doc->mediumUltraItalic.index = istr.toInt();
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		char * family = font->getFamilyName();
		if (family)
		{
			XWString tmpstr(family, strlen(family));
			doc->mediumUltraItalic.family = tmpstr.toQString();
		}
		doc->mediumUltraItalic.pid = font->getPlatformID();
		doc->mediumUltraItalic.eid = font->getEncodingID();

		if (font->isFixedWidth())
	    doc->mediumUltraItalic.sizes = "<-> s * [0.92469]";
	  else
	    doc->mediumUltraItalic.sizes = "<->";
	}

	return -1;
}

void XWLaTeXMediumUltraItalicPage::changeFile()
{
	indexCombo->disconnect(this);

	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, 0, 0, 12, e, s, 0, false, false, encname, -1);
	XWFTFont * font = characterWidget->getFTFont();
  if (font)
	{
		int numface = font->getNumFaces();
			
		indexCombo->clear();
		for (int i = 0; i < numface; i++)
		{
			QString t = QString("%1").arg(i);
			indexCombo->addItem(t);
		}
						
		indexCombo->setCurrentIndex(0);		
	}

	connect(indexCombo, SIGNAL(currentIndexChanged(int)), this, SLOT(displayFont()));	
}

void XWLaTeXMediumUltraItalicPage::displayFont()
{
	QString istr = indexCombo->currentText();
	int i = istr.toInt();	
	QString f = fontFileCombo->currentText();
	double e = efacterBox->value();
	double s = slantBox->value();
  QString encname;
	characterWidget->displayFTFont(f, i, 0, 12, e, s, 0, false, false, encname, -1);
}
